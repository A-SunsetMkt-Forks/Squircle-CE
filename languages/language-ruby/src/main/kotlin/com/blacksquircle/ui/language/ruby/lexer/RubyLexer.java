/*
 * Copyright 2021 Squircle IDE contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.blacksquircle.ui.language.ruby.lexer;

import org.jetbrains.annotations.NotNull;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.8.2
 * from the specification file <tt>shell.flex</tt>
 */
public class RubyLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\3\u1f00"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u1f00\1\u4a00\1\u1f00\1\u4b00\1\u4c00\2\u1f00\3\u0100"+
    "\1\u4d00\1\u4e00\1\u4f00\12\u1f00\4\u0100\1\u5000\17\u1f00\2\u0100"+
    "\1\u5100\41\u1f00\2\u0100\1\u5200\1\u5300\3\u1f00\1\u5400\27\u0100"+
    "\1\u5500\2\u0100\1\u5600\45\u1f00\1\u0100\1\u5700\1\u5800\11\u1f00"+
    "\1\u5900\24\u1f00\1\u5a00\1\u5b00\1\u1f00\1\u5c00\1\u5d00\1\u5e00"+
    "\1\u5f00\2\u1f00\1\u6000\5\u1f00\1\u6100\7\u1f00\1\u6200\1\u6300"+
    "\4\u1f00\1\u6400\21\u1f00\246\u0100\1\u6500\20\u0100\1\u6600\1\u6700"+
    "\25\u0100\1\u6800\34\u0100\1\u6900\14\u1f00\2\u0100\1\u6a00\u0b05\u1f00"+
    "\1\u6b00\1\u6c00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\11\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\2\46\1\50\1\46\1\51\1\52\1\53"+
    "\1\46\1\54\1\46\1\55\3\46\1\56\2\46\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\46\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\46\1\115"+
    "\1\116\1\117\1\120\6\0\1\121\32\0\1\122\1\6"+
    "\4\12\4\6\1\12\2\6\1\0\7\6\1\12\4\6"+
    "\1\12\5\6\27\12\1\6\37\12\1\6\u01ca\12\4\6"+
    "\14\12\16\6\5\12\7\6\1\12\1\6\1\12\21\6"+
    "\160\0\5\12\1\6\2\12\2\6\4\12\1\6\1\12"+
    "\6\6\1\12\1\6\3\12\1\6\1\12\1\6\24\12"+
    "\1\6\123\12\1\6\213\12\1\6\5\0\2\6\246\12"+
    "\1\6\46\12\2\6\1\12\7\6\47\12\7\6\1\12"+
    "\1\6\55\0\1\6\1\0\1\6\2\0\1\6\2\0"+
    "\1\6\1\0\10\6\33\12\5\6\3\12\15\6\6\0"+
    "\5\6\1\12\4\6\13\0\1\6\1\0\3\6\53\12"+
    "\37\0\4\6\2\12\1\0\143\12\1\6\1\12\10\0"+
    "\1\6\6\0\2\12\2\0\1\6\4\0\2\12\12\0"+
    "\3\12\2\6\1\12\17\6\1\0\1\12\1\0\36\12"+
    "\33\0\2\6\131\12\13\0\1\12\16\6\12\0\41\12"+
    "\11\0\2\12\4\6\1\12\5\6\26\12\4\0\1\12"+
    "\11\0\1\12\3\0\1\12\5\0\22\6\31\12\3\0"+
    "\4\6\13\12\65\6\25\12\1\6\10\12\26\6\60\0"+
    "\66\12\3\0\1\12\22\0\1\12\7\0\12\12\2\0"+
    "\2\6\12\0\1\6\20\12\3\0\1\6\10\12\2\6"+
    "\2\12\2\6\26\12\1\6\7\12\1\6\1\12\3\6"+
    "\4\12\2\6\1\0\1\12\7\0\2\6\2\0\2\6"+
    "\3\0\1\12\10\6\1\0\4\6\2\12\1\6\3\12"+
    "\2\0\2\6\12\0\4\12\7\6\2\12\4\6\3\0"+
    "\1\6\6\12\4\6\2\12\2\6\26\12\1\6\7\12"+
    "\1\6\2\12\1\6\2\12\1\6\2\12\2\6\1\0"+
    "\1\6\5\0\4\6\2\0\2\6\3\0\3\6\1\0"+
    "\7\6\4\12\1\6\1\12\7\6\14\0\3\12\1\0"+
    "\13\6\3\0\1\6\11\12\1\6\3\12\1\6\26\12"+
    "\1\6\7\12\1\6\2\12\1\6\5\12\2\6\1\0"+
    "\1\12\10\0\1\6\3\0\1\6\3\0\2\6\1\12"+
    "\17\6\2\12\2\0\2\6\12\0\1\6\1\12\7\6"+
    "\1\12\6\0\1\6\3\0\1\6\10\12\2\6\2\12"+
    "\2\6\26\12\1\6\7\12\1\6\2\12\1\6\5\12"+
    "\2\6\1\0\1\12\7\0\2\6\2\0\2\6\3\0"+
    "\10\6\2\0\4\6\2\12\1\6\3\12\2\0\2\6"+
    "\12\0\1\6\1\12\20\6\1\0\1\12\1\6\6\12"+
    "\3\6\3\12\1\6\4\12\3\6\2\12\1\6\1\12"+
    "\1\6\2\12\3\6\2\12\3\6\3\12\3\6\14\12"+
    "\4\6\5\0\3\6\3\0\1\6\4\0\2\6\1\12"+
    "\6\6\1\0\16\6\12\0\11\6\1\12\6\6\4\0"+
    "\1\6\10\12\1\6\3\12\1\6\27\12\1\6\20\12"+
    "\3\6\1\12\7\0\1\6\3\0\1\6\4\0\7\6"+
    "\2\0\1\6\3\12\5\6\2\12\2\0\2\6\12\0"+
    "\20\6\1\12\3\0\1\6\10\12\1\6\3\12\1\6"+
    "\27\12\1\6\12\12\1\6\5\12\2\6\1\0\1\12"+
    "\7\0\1\6\3\0\1\6\4\0\7\6\2\0\7\6"+
    "\1\12\1\6\2\12\2\0\2\6\12\0\1\6\2\12"+
    "\15\6\4\0\1\6\10\12\1\6\3\12\1\6\51\12"+
    "\2\0\1\12\7\0\1\6\3\0\1\6\4\0\1\12"+
    "\5\6\3\12\1\0\7\6\3\12\2\0\2\6\12\0"+
    "\12\6\6\12\2\6\2\0\1\6\22\12\3\6\30\12"+
    "\1\6\11\12\1\6\1\12\2\6\7\12\3\6\1\0"+
    "\4\6\6\0\1\6\1\0\1\6\10\0\6\6\12\0"+
    "\2\6\2\0\15\6\60\12\1\0\2\12\7\0\4\6"+
    "\10\12\10\0\1\6\12\0\47\6\2\12\1\6\1\12"+
    "\2\6\2\12\1\6\1\12\2\6\1\12\6\6\4\12"+
    "\1\6\7\12\1\6\3\12\1\6\1\12\1\6\1\12"+
    "\2\6\2\12\1\6\4\12\1\0\2\12\6\0\1\6"+
    "\2\0\1\12\2\6\5\12\1\6\1\12\1\6\6\0"+
    "\2\6\12\0\2\6\4\12\40\6\1\12\27\6\2\0"+
    "\6\6\12\0\13\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\2\0\10\12\1\6\44\12\4\6\24\0\1\6"+
    "\2\0\5\12\13\0\1\6\44\0\11\6\1\0\71\6"+
    "\53\12\24\0\1\12\12\0\6\6\6\12\4\0\4\12"+
    "\3\0\1\12\3\0\2\12\7\0\3\12\4\0\15\12"+
    "\14\0\1\12\17\0\2\6\46\12\1\6\1\12\5\6"+
    "\1\12\2\6\53\12\1\6\115\12\1\6\4\12\2\6"+
    "\7\12\1\6\1\12\1\6\4\12\2\6\51\12\1\6"+
    "\4\12\2\6\41\12\1\6\4\12\2\6\7\12\1\6"+
    "\1\12\1\6\4\12\2\6\17\12\1\6\71\12\1\6"+
    "\4\12\2\6\103\12\2\6\3\0\40\6\20\12\20\6"+
    "\126\12\2\6\6\12\3\6\u016c\12\2\6\21\12\1\122"+
    "\32\12\5\6\113\12\3\6\13\12\7\6\15\12\1\6"+
    "\4\12\3\0\13\6\22\12\3\0\13\6\22\12\2\0"+
    "\14\6\15\12\1\6\3\12\1\6\2\0\14\6\64\12"+
    "\40\0\3\6\1\12\3\6\2\12\1\0\2\6\12\0"+
    "\41\6\4\0\1\6\12\0\6\6\130\12\10\6\5\12"+
    "\2\0\42\12\1\0\1\12\5\6\106\12\12\6\37\12"+
    "\1\6\14\0\4\6\14\0\12\6\12\0\36\12\2\6"+
    "\5\12\13\6\54\12\4\6\32\12\6\6\12\0\46\6"+
    "\27\12\5\0\4\6\65\12\12\0\1\6\35\0\2\6"+
    "\13\0\6\6\12\0\15\6\1\12\10\6\16\0\102\6"+
    "\5\0\57\12\21\0\7\12\4\6\12\0\21\6\11\0"+
    "\14\6\3\0\36\12\15\0\2\12\12\0\54\12\16\0"+
    "\14\6\44\12\24\0\10\6\12\0\3\6\3\12\12\0"+
    "\44\12\2\6\11\12\107\6\3\0\1\6\25\0\4\12"+
    "\1\0\4\12\3\0\2\12\3\0\6\6\300\12\72\0"+
    "\1\6\5\0\26\12\2\6\6\12\2\6\46\12\2\6"+
    "\6\12\2\6\10\12\1\6\1\12\1\6\1\12\1\6"+
    "\1\12\1\6\37\12\2\6\65\12\1\6\7\12\1\6"+
    "\1\12\3\6\3\12\1\6\7\12\3\6\4\12\2\6"+
    "\6\12\4\6\15\12\5\6\3\12\1\6\7\12\3\6"+
    "\13\122\5\0\30\6\2\3\5\0\1\122\17\6\2\12"+
    "\23\6\1\12\12\6\1\122\5\0\1\6\12\0\1\6"+
    "\1\12\15\6\1\12\20\6\15\12\3\6\40\12\20\6"+
    "\15\0\4\6\1\0\3\6\14\0\21\6\1\12\4\6"+
    "\1\12\2\6\12\12\1\6\1\12\3\6\5\12\6\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\4\12\1\6"+
    "\13\12\2\6\4\12\5\6\5\12\4\6\1\12\21\6"+
    "\51\12\u0177\6\57\12\1\6\57\12\1\6\205\12\6\6"+
    "\4\12\3\0\2\12\14\6\46\12\1\6\1\12\5\6"+
    "\1\12\2\6\70\12\7\6\1\12\17\6\1\0\27\12"+
    "\11\6\7\12\1\6\7\12\1\6\7\12\1\6\7\12"+
    "\1\6\7\12\1\6\7\12\1\6\7\12\1\6\7\12"+
    "\1\6\40\0\57\6\1\12\320\6\1\122\4\6\3\12"+
    "\31\6\11\12\6\0\1\6\5\12\2\6\5\12\4\6"+
    "\126\12\2\6\2\0\2\6\3\12\1\6\132\12\1\6"+
    "\4\12\5\6\52\12\2\6\136\12\21\6\33\12\65\6"+
    "\306\12\112\6\353\12\25\6\215\12\103\6\56\12\2\6"+
    "\15\12\3\6\20\12\12\0\2\12\24\6\57\12\1\0"+
    "\4\6\12\0\1\6\37\12\2\0\120\12\2\0\45\6"+
    "\11\12\2\6\147\12\2\6\44\12\1\6\10\12\77\6"+
    "\13\12\1\0\3\12\1\0\4\12\1\0\27\12\5\0"+
    "\20\6\1\12\7\6\64\12\14\6\2\0\62\12\22\0"+
    "\12\6\12\0\6\6\22\0\6\12\3\6\1\12\1\6"+
    "\1\12\2\6\12\0\34\12\10\0\2\6\27\12\15\0"+
    "\14\6\35\12\3\6\4\0\57\12\16\0\16\6\1\12"+
    "\12\0\6\6\5\12\1\0\12\12\12\0\5\12\1\6"+
    "\51\12\16\0\11\6\3\12\1\0\10\12\2\0\2\6"+
    "\12\0\6\6\27\12\3\6\1\12\3\0\62\12\1\0"+
    "\1\12\3\0\2\12\2\0\5\12\2\0\1\12\1\0"+
    "\1\12\30\6\3\12\2\6\13\12\5\0\2\6\3\12"+
    "\2\0\12\6\6\12\2\6\6\12\2\6\6\12\11\6"+
    "\7\12\1\6\7\12\1\6\53\12\1\6\12\12\12\6"+
    "\163\12\10\0\1\6\2\0\2\6\12\0\6\6\244\12"+
    "\14\6\27\12\4\6\61\12\4\6\u0100\123\156\12\2\6"+
    "\152\12\46\6\7\12\14\6\5\12\5\6\1\12\1\0"+
    "\12\12\1\6\15\12\1\6\5\12\1\6\1\12\1\6"+
    "\2\12\1\6\2\12\1\6\154\12\41\6\153\12\22\6"+
    "\100\12\2\6\66\12\50\6\15\12\3\6\20\0\20\6"+
    "\20\0\3\6\2\12\30\6\3\12\31\6\1\12\6\6"+
    "\5\12\1\6\207\12\2\6\1\0\4\6\1\12\13\6"+
    "\12\0\7\6\32\12\4\6\1\12\1\6\32\12\13\6"+
    "\131\12\3\6\6\12\2\6\6\12\2\6\6\12\2\6"+
    "\3\12\3\6\2\12\3\6\2\12\22\6\3\0\4\6"+
    "\14\12\1\6\32\12\1\6\23\12\1\6\2\12\1\6"+
    "\17\12\2\6\16\12\42\6\173\12\105\6\65\12\210\6"+
    "\1\0\202\6\35\12\3\6\61\12\17\6\1\0\37\6"+
    "\40\12\15\6\36\12\5\6\46\12\5\0\5\6\36\12"+
    "\2\6\44\12\4\6\10\12\1\6\5\12\52\6\236\12"+
    "\2\6\12\0\6\6\44\12\4\6\44\12\4\6\50\12"+
    "\10\6\64\12\234\6\67\12\11\6\26\12\12\6\10\12"+
    "\230\6\6\12\2\6\1\12\1\6\54\12\1\6\2\12"+
    "\3\6\1\12\2\6\27\12\12\6\27\12\11\6\37\12"+
    "\101\6\23\12\1\6\2\12\12\6\26\12\12\6\32\12"+
    "\106\6\70\12\6\6\2\12\100\6\1\12\3\0\1\6"+
    "\2\0\5\6\4\0\4\12\1\6\3\12\1\6\33\12"+
    "\4\6\3\0\4\6\1\0\40\6\35\12\3\6\35\12"+
    "\43\6\10\12\1\6\34\12\2\0\31\6\66\12\12\6"+
    "\26\12\12\6\23\12\15\6\22\12\156\6\111\12\67\6"+
    "\63\12\15\6\63\12\15\6\3\0\65\12\17\0\37\6"+
    "\12\0\17\6\4\0\55\12\13\0\2\6\1\0\22\6"+
    "\31\12\7\6\12\0\6\6\3\0\44\12\16\0\1\6"+
    "\12\0\20\6\43\12\1\0\2\6\1\12\11\6\3\0"+
    "\60\12\16\0\4\12\5\6\3\0\3\6\12\0\1\12"+
    "\1\6\1\12\43\6\22\12\1\6\31\12\14\0\6\6"+
    "\1\0\101\6\7\12\1\6\1\12\1\6\4\12\1\6"+
    "\17\12\1\6\12\12\7\6\57\12\14\0\5\6\12\0"+
    "\6\6\4\0\1\6\10\12\2\6\2\12\2\6\26\12"+
    "\1\6\7\12\1\6\2\12\1\6\5\12\2\6\1\0"+
    "\1\12\7\0\2\6\2\0\2\6\3\0\2\6\1\12"+
    "\6\6\1\0\5\6\5\12\2\0\2\6\7\0\3\6"+
    "\5\0\213\6\65\12\22\0\4\12\5\6\12\0\46\6"+
    "\60\12\24\0\2\12\1\6\1\12\10\6\12\0\246\6"+
    "\57\12\7\0\2\6\11\0\27\6\4\12\2\0\42\6"+
    "\60\12\21\0\3\6\1\12\13\6\12\0\46\6\53\12"+
    "\15\0\10\6\12\0\66\6\32\12\3\6\17\0\4\6"+
    "\12\0\u0166\6\100\12\12\0\25\6\2\12\12\0\50\12"+
    "\7\0\1\12\4\0\10\6\1\0\10\6\1\12\13\0"+
    "\50\12\2\6\4\12\20\0\46\6\71\12\7\6\11\12"+
    "\1\6\45\12\10\0\1\6\10\0\1\12\17\6\12\0"+
    "\30\6\36\12\2\6\26\0\1\6\16\0\111\6\7\12"+
    "\1\6\2\12\1\6\46\12\6\0\3\6\1\0\1\6"+
    "\2\0\1\6\7\0\1\12\1\0\10\6\12\0\246\6"+
    "\232\12\146\6\157\12\21\6\304\12\274\6\57\12\321\6"+
    "\107\12\271\6\71\12\7\6\37\12\1\6\12\0\146\6"+
    "\36\12\2\6\5\0\13\6\60\12\7\0\11\6\4\12"+
    "\14\6\12\0\11\6\25\12\5\6\23\12\160\6\105\12"+
    "\13\6\1\12\56\0\20\6\4\0\15\12\100\6\2\12"+
    "\36\6\355\12\23\6\363\12\15\6\37\12\121\6\u018c\12"+
    "\4\6\153\12\5\6\15\12\3\6\11\12\7\6\12\12"+
    "\3\6\2\0\1\6\4\0\301\6\5\0\3\6\26\0"+
    "\2\6\7\0\36\6\4\0\224\6\3\0\273\6\125\12"+
    "\1\6\107\12\1\6\2\12\2\6\1\12\2\6\2\12"+
    "\2\6\4\12\1\6\14\12\1\6\1\12\1\6\7\12"+
    "\1\6\101\12\1\6\4\12\2\6\10\12\1\6\7\12"+
    "\1\6\34\12\1\6\4\12\1\6\5\12\1\6\1\12"+
    "\3\6\7\12\1\6\u0154\12\2\6\31\12\1\6\31\12"+
    "\1\6\37\12\1\6\31\12\1\6\37\12\1\6\31\12"+
    "\1\6\37\12\1\6\31\12\1\6\37\12\1\6\31\12"+
    "\1\6\10\12\2\6\151\0\4\6\62\0\10\6\1\0"+
    "\16\6\1\0\26\6\5\0\1\6\17\0\120\6\7\0"+
    "\1\6\21\0\2\6\7\0\1\6\2\0\1\6\5\0"+
    "\325\6\305\12\13\6\7\0\51\6\104\12\7\0\5\6"+
    "\12\0\246\6\4\12\1\6\33\12\1\6\2\12\1\6"+
    "\1\12\2\6\1\12\1\6\12\12\1\6\4\12\1\6"+
    "\1\12\1\6\1\12\6\6\1\12\4\6\1\12\1\6"+
    "\1\12\1\6\1\12\1\6\3\12\1\6\2\12\1\6"+
    "\1\12\2\6\1\12\1\6\1\12\1\6\1\12\1\6"+
    "\1\12\1\6\1\12\1\6\2\12\1\6\1\12\2\6"+
    "\4\12\1\6\7\12\1\6\4\12\1\6\4\12\1\6"+
    "\1\12\1\6\12\12\1\6\21\12\5\6\3\12\1\6"+
    "\5\12\1\6\21\12\104\6\327\12\51\6\65\12\13\6"+
    "\336\12\2\6\u0182\12\16\6\u0131\12\37\6\36\12\343\6"+
    "\1\0\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\4\6\1\31\1\32\1\33\1\6\1\34\14\6"+
    "\1\35\6\6\1\36\1\37\1\40\1\41\1\42\1\4"+
    "\1\0\2\5\1\43\1\44\1\45\1\11\1\0\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\35\1\54\1\22"+
    "\2\53\1\55\1\56\1\22\1\57\1\60\1\61\1\62"+
    "\1\0\1\63\1\64\3\6\1\65\1\66\12\6\1\67"+
    "\10\6\1\70\1\71\7\6\1\37\1\35\17\6\1\72"+
    "\1\73\2\4\1\0\1\74\2\11\1\75\1\53\1\0"+
    "\1\22\1\76\1\0\1\77\1\100\1\6\1\101\5\6"+
    "\1\10\6\6\1\102\1\6\1\103\5\6\1\104\7\6"+
    "\1\105\1\3\27\6\1\74\2\0\7\6\1\106\3\6"+
    "\1\107\6\6\1\110\2\6\1\111\5\6\1\112\2\6"+
    "\1\113\1\6\1\114\3\6\1\115\2\6\1\0\4\6"+
    "\1\116\1\117\1\120\1\121\1\6\1\122\1\6\1\123"+
    "\5\6\1\124\1\6\1\125\1\6\1\126\1\6\1\127"+
    "\1\130\1\131\1\0\5\6\1\132\1\133\1\6\1\134"+
    "\1\135\1\136\1\137\5\6\1\0\1\6\1\140\1\141"+
    "\1\142\1\35\1\0\1\6\1\0\1\6\1\137\1\6"+
    "\1\143";

  private static int [] zzUnpackAction() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\124\0\250\0\374\0\u0150\0\u01a4\0\u01f8"+
    "\0\u024c\0\u02a0\0\u02f4\0\124\0\124\0\u0348\0\u039c\0\124"+
    "\0\u03f0\0\u0444\0\u0498\0\u04ec\0\u0540\0\124\0\124\0\u0594"+
    "\0\u05e8\0\u063c\0\124\0\u0690\0\u06e4\0\u0738\0\u078c\0\124"+
    "\0\124\0\u07e0\0\u0834\0\124\0\u0888\0\u08dc\0\u0930\0\u0984"+
    "\0\u09d8\0\u0a2c\0\u0a80\0\u0ad4\0\u0b28\0\u0b7c\0\u0bd0\0\u0c24"+
    "\0\u0c78\0\u0ccc\0\u0d20\0\u0d74\0\u0dc8\0\u0e1c\0\u0e70\0\124"+
    "\0\u0ec4\0\124\0\124\0\124\0\124\0\u0f18\0\u0f6c\0\u0fc0"+
    "\0\124\0\124\0\124\0\124\0\u1014\0\u1068\0\124\0\124"+
    "\0\124\0\124\0\u10bc\0\u1110\0\124\0\u1164\0\124\0\u11b8"+
    "\0\124\0\124\0\u120c\0\u1260\0\124\0\124\0\124\0\u12b4"+
    "\0\124\0\u1308\0\u135c\0\u13b0\0\u1404\0\u01f8\0\124\0\u1458"+
    "\0\u14ac\0\u1500\0\u1554\0\u15a8\0\u15fc\0\u1650\0\u16a4\0\u16f8"+
    "\0\u174c\0\u01f8\0\u17a0\0\u17f4\0\u1848\0\u189c\0\u18f0\0\u1944"+
    "\0\u1998\0\u19ec\0\u01f8\0\u01f8\0\u1a40\0\u1a94\0\u1ae8\0\u1b3c"+
    "\0\u1b90\0\u1be4\0\u1c38\0\u01f8\0\u01f8\0\u1c8c\0\u1ce0\0\u1d34"+
    "\0\u1d88\0\u1ddc\0\u1e30\0\u1e84\0\u1ed8\0\u1f2c\0\u1f80\0\u1fd4"+
    "\0\u2028\0\u207c\0\u20d0\0\u2124\0\124\0\124\0\u2178\0\u21cc"+
    "\0\u2220\0\u0f6c\0\u2274\0\u22c8\0\124\0\u231c\0\u2370\0\u23c4"+
    "\0\124\0\u2418\0\124\0\u01f8\0\u246c\0\u01f8\0\u24c0\0\u2514"+
    "\0\u2568\0\u25bc\0\u2610\0\u01f8\0\u2664\0\u26b8\0\u270c\0\u2760"+
    "\0\u27b4\0\u2808\0\u285c\0\u28b0\0\u01f8\0\u2904\0\u2958\0\u29ac"+
    "\0\u2a00\0\u2a54\0\u2aa8\0\u2afc\0\u2b50\0\u2ba4\0\u2bf8\0\u2c4c"+
    "\0\u2ca0\0\u2cf4\0\u01f8\0\u01f8\0\u2d48\0\u2d9c\0\u2df0\0\u2e44"+
    "\0\u2e98\0\u2eec\0\u2f40\0\u2f94\0\u2fe8\0\u303c\0\u3090\0\u30e4"+
    "\0\u3138\0\u318c\0\u31e0\0\u3234\0\u3288\0\u32dc\0\u3330\0\u3384"+
    "\0\u33d8\0\u342c\0\u3480\0\124\0\u34d4\0\u3528\0\u357c\0\u35d0"+
    "\0\u3624\0\u3678\0\u36cc\0\u3720\0\u3774\0\u01f8\0\u37c8\0\u381c"+
    "\0\u3870\0\u01f8\0\u38c4\0\u3918\0\u396c\0\u39c0\0\u3a14\0\u3a68"+
    "\0\u01f8\0\u3abc\0\u3b10\0\u01f8\0\u3b64\0\u3bb8\0\u3c0c\0\u3c60"+
    "\0\u3cb4\0\u01f8\0\u3d08\0\u3d5c\0\u01f8\0\u3db0\0\u01f8\0\u3e04"+
    "\0\u3e58\0\u3eac\0\u01f8\0\u3f00\0\u3f54\0\u3fa8\0\u3ffc\0\u4050"+
    "\0\u40a4\0\u40f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u414c\0\u01f8"+
    "\0\u41a0\0\u01f8\0\u41f4\0\u4248\0\u429c\0\u42f0\0\u4344\0\u01f8"+
    "\0\u4398\0\u01f8\0\u43ec\0\u01f8\0\u4440\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u4494\0\u44e8\0\u453c\0\u4590\0\u45e4\0\u4638\0\u01f8\0\u01f8"+
    "\0\u468c\0\u01f8\0\u01f8\0\u01f8\0\u46e0\0\u4734\0\u4788\0\u47dc"+
    "\0\u4830\0\u4884\0\u48d8\0\u492c\0\u01f8\0\u01f8\0\124\0\u2afc"+
    "\0\u4980\0\u49d4\0\u4a28\0\u4a7c\0\124\0\u4ad0\0\u01f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\2\1\33\1\34\7\10"+
    "\1\35\1\10\1\36\1\37\4\10\1\40\1\2\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\10\1\54\1\10\1\55\1\56\1\57"+
    "\1\60\1\61\1\10\1\62\1\63\1\64\1\65\1\10"+
    "\1\66\1\10\1\67\1\70\1\71\1\72\1\73\3\2"+
    "\126\0\1\3\154\0\1\74\70\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\75\47\6\1\76\43\6\2\77\4\0"+
    "\107\77\1\100\3\77\1\0\1\77\1\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\30\10\4\0\1\10\35\0\1\101\104\0\1\102\16\0"+
    "\1\103\70\0\2\13\1\0\2\13\1\0\7\13\1\104"+
    "\42\13\1\105\43\13\20\0\1\106\12\0\1\107\123\0"+
    "\1\110\123\0\1\111\114\0\1\112\1\0\2\113\7\0"+
    "\20\114\6\0\30\114\42\0\1\115\114\0\1\113\1\0"+
    "\2\25\10\0\1\116\1\0\1\117\1\120\1\121\3\0"+
    "\1\122\5\0\1\123\4\0\1\25\2\0\1\116\1\0"+
    "\1\117\1\120\1\121\4\0\1\122\13\0\1\123\34\0"+
    "\1\113\1\0\2\25\12\0\1\117\1\120\1\121\3\0"+
    "\1\122\12\0\1\25\4\0\1\117\1\120\1\121\4\0"+
    "\1\122\56\0\1\124\1\125\1\126\122\0\1\127\32\0"+
    "\1\130\70\0\1\131\1\132\67\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\12\10\1\133\5\10\4\0\1\10"+
    "\1\0\30\10\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\20\10\4\0\1\10\1\0\14\10"+
    "\1\134\13\10\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\13\10\1\135\4\10\4\0\1\10"+
    "\1\0\30\10\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\15\10\1\136\2\10\4\0\1\10"+
    "\1\0\30\10\4\0\1\10\35\0\1\137\70\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\140"+
    "\1\0\30\10\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\20\10\4\0\1\10\1\0\1\10"+
    "\1\141\10\10\1\142\1\10\1\143\13\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\4\10\1\144\13\10\1\145\7\10"+
    "\4\0\1\10\2\0\1\10\11\0\1\10\13\0\2\10"+
    "\7\0\20\10\4\0\1\10\1\0\1\146\6\10\1\147"+
    "\2\10\1\150\15\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\4\10\1\151\10\10\1\152\12\10\4\0\1\10\2\0"+
    "\1\10\11\0\1\10\13\0\2\10\7\0\20\10\4\0"+
    "\1\10\1\0\12\10\1\153\1\10\1\154\7\10\1\155"+
    "\1\10\1\156\1\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\1\157\14\10\1\160\12\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\4\10\1\161\14\10\1\162\6\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\5\10\1\163\6\10\1\164\13\10"+
    "\4\0\1\10\2\0\1\10\11\0\1\10\13\0\2\10"+
    "\7\0\20\10\4\0\1\10\1\0\1\165\14\10\1\166"+
    "\12\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\15\10\1\167"+
    "\12\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\4\10\1\170"+
    "\3\10\1\171\4\10\1\172\12\10\4\0\1\10\2\0"+
    "\1\10\11\0\1\10\13\0\2\10\7\0\20\10\4\0"+
    "\1\10\1\0\16\10\1\173\1\10\1\174\7\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\16\10\1\175\1\10\1\176"+
    "\2\10\1\177\4\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\1\200\3\10\1\201\23\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\2\10\1\202\1\10\1\203\5\10\1\204\5\10"+
    "\1\205\2\10\1\206\3\10\1\207\4\0\1\10\2\0"+
    "\1\10\11\0\1\10\13\0\2\10\7\0\20\10\4\0"+
    "\1\10\1\0\7\10\1\210\10\10\1\211\7\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\14\10\1\212\13\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\7\10\1\213\20\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\10\10\1\214\17\10\4\0"+
    "\1\10\35\0\1\215\62\0\1\216\5\0\1\6\1\217"+
    "\2\6\1\217\1\220\116\6\2\77\4\0\113\77\1\0"+
    "\1\77\1\0\2\100\4\221\111\100\1\222\1\100\1\221"+
    "\1\100\1\221\1\13\1\223\2\13\1\223\1\224\116\13"+
    "\33\0\1\225\116\0\2\113\12\0\1\117\1\120\1\121"+
    "\16\0\1\113\4\0\1\117\1\120\1\121\31\0\1\114"+
    "\5\0\113\114\2\0\1\114\26\0\2\116\20\0\1\122"+
    "\12\0\1\116\13\0\1\122\45\0\1\226\1\0\1\226"+
    "\2\0\2\226\12\0\1\117\1\0\1\121\16\0\1\226"+
    "\4\0\1\117\1\0\1\121\55\0\1\227\1\0\2\230"+
    "\7\0\6\230\3\0\1\122\12\0\1\230\1\0\6\230"+
    "\4\0\1\122\57\0\1\231\161\0\1\232\65\0\1\233"+
    "\70\0\1\10\11\0\1\10\13\0\2\10\7\0\3\10"+
    "\1\234\14\10\4\0\1\10\1\0\30\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\22\10\1\235\5\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\16\10"+
    "\1\236\1\10\4\0\1\10\1\0\30\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\4\10"+
    "\1\237\1\240\3\10\1\241\6\10\4\0\1\10\1\0"+
    "\30\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\15\10\1\242"+
    "\12\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\10\10\1\243"+
    "\17\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\3\10\1\244"+
    "\24\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\6\10\1\245"+
    "\21\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\4\10\1\246"+
    "\23\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\21\10\1\247"+
    "\1\250\5\10\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\20\10\4\0\1\10\1\0\15\10"+
    "\1\251\12\10\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\20\10\4\0\1\10\1\0\1\252"+
    "\27\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\5\10\1\253"+
    "\22\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\21\10\1\254"+
    "\6\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\3\10\1\255"+
    "\15\10\1\256\6\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\1\257\27\10\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\20\10\4\0\1\10\1\0\4\10"+
    "\1\260\3\10\1\261\17\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\10\10\1\257\1\10\1\262\15\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\20\10\1\263\7\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\22\10\1\264\5\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\23\10\1\265\4\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\13\10\1\266\14\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\1\267\14\10\1\270\12\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\3\10\1\271\24\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\26\10\1\272\1\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\12\10\1\273\15\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\22\10\1\274\5\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\4\10\1\275\23\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\10\10\1\276\4\10\1\260"+
    "\12\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\22\10\1\277"+
    "\5\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\10\10\1\300"+
    "\3\10\1\267\13\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\1\301\2\10\1\302\13\10\1\303\1\10\1\304\1\305"+
    "\5\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\1\275\27\10"+
    "\4\0\1\10\2\0\1\10\11\0\1\10\13\0\2\10"+
    "\7\0\20\10\4\0\1\10\1\0\12\10\1\306\15\10"+
    "\4\0\1\10\2\0\1\10\11\0\1\10\13\0\2\10"+
    "\7\0\20\10\4\0\1\10\1\0\4\10\1\307\23\10"+
    "\4\0\1\10\2\0\1\10\11\0\1\10\13\0\2\10"+
    "\7\0\20\10\4\0\1\10\1\0\1\310\27\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\1\10\1\175\14\10\1\311"+
    "\11\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\21\10\1\312"+
    "\6\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\4\10\1\313"+
    "\13\10\1\314\7\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\23\10\1\315\4\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\3\10\1\316\6\10\1\317\7\10\1\320\5\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\4\10\1\321\3\10\1\322"+
    "\17\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\4\10\1\323"+
    "\23\10\4\0\1\10\2\0\1\6\1\217\2\6\1\217"+
    "\1\220\2\6\1\75\47\6\1\76\50\6\1\0\2\6"+
    "\1\75\47\6\1\76\43\6\117\221\1\324\4\221\1\13"+
    "\1\223\2\13\1\223\1\224\7\13\1\104\42\13\1\105"+
    "\50\13\1\0\7\13\1\104\42\13\1\105\43\13\26\0"+
    "\2\226\12\0\1\117\1\0\1\121\16\0\1\226\4\0"+
    "\1\117\1\0\1\121\57\0\2\325\7\0\6\325\16\0"+
    "\1\325\1\0\6\325\55\0\1\325\1\0\2\230\7\0"+
    "\6\230\3\0\1\122\2\0\1\120\7\0\1\230\1\0"+
    "\6\230\4\0\1\122\3\0\1\120\113\0\1\326\30\0"+
    "\1\10\11\0\1\10\13\0\2\10\7\0\20\10\4\0"+
    "\1\10\1\0\4\10\1\327\23\10\4\0\1\10\2\0"+
    "\1\10\11\0\1\10\13\0\2\10\7\0\12\10\1\330"+
    "\5\10\4\0\1\10\1\0\30\10\4\0\1\10\2\0"+
    "\1\10\11\0\1\10\13\0\2\10\7\0\10\10\1\331"+
    "\7\10\4\0\1\10\1\0\30\10\4\0\1\10\2\0"+
    "\1\10\11\0\1\10\13\0\2\10\7\0\10\10\1\332"+
    "\7\10\4\0\1\10\1\0\30\10\4\0\1\10\2\0"+
    "\1\10\11\0\1\10\13\0\2\10\7\0\20\10\4\0"+
    "\1\10\1\0\20\10\1\261\7\10\4\0\1\10\2\0"+
    "\1\10\11\0\1\10\13\0\2\10\7\0\20\10\4\0"+
    "\1\10\1\0\1\333\27\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\10\10\1\334\17\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\1\335\27\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\4\10\1\336\23\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\2\10\1\337\25\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\13\10\1\270\2\10\1\175\11\10\4\0\1\10\2\0"+
    "\1\10\11\0\1\10\13\0\2\10\7\0\20\10\4\0"+
    "\1\10\1\0\21\10\1\340\6\10\4\0\1\10\2\0"+
    "\1\10\11\0\1\10\13\0\2\10\7\0\20\10\4\0"+
    "\1\10\1\0\10\10\1\341\17\10\4\0\1\10\2\0"+
    "\1\10\11\0\1\10\13\0\2\10\7\0\20\10\4\0"+
    "\1\10\1\0\4\10\1\342\3\10\1\343\17\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\23\10\1\344\4\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\12\10\1\175\15\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\2\10\1\175\25\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\22\10\1\175\5\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\21\10\1\345\6\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\11\10\1\175\1\10\1\346"+
    "\14\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\21\10\1\175"+
    "\6\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\1\10\1\175"+
    "\26\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\1\10\1\347"+
    "\26\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\3\10\1\175"+
    "\24\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\16\10\1\175"+
    "\11\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\23\10\1\350"+
    "\4\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\22\10\1\351"+
    "\5\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\14\10\1\175"+
    "\13\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\14\10\1\261"+
    "\13\10\4\0\1\10\2\0\1\10\11\0\1\10\13\0"+
    "\2\10\7\0\20\10\4\0\1\10\1\0\2\10\1\175"+
    "\16\10\1\175\6\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\21\10\1\352\6\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\3\10\1\353\24\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\15\10\1\354\12\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\23\10\1\355\4\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\2\10\1\356\25\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\20\10\1\357\2\10\1\360\4\10\4\0\1\10\2\0"+
    "\1\10\11\0\1\10\13\0\2\10\7\0\20\10\4\0"+
    "\1\10\1\0\4\10\1\361\1\362\22\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\4\10\1\270\23\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\14\10\1\267\13\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\4\10\1\363\23\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\22\10\1\364\5\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\14\10\1\365\13\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\15\10\1\366\12\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\4\10\1\367\23\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\4\10\1\370\23\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\4\10\1\371\23\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\10\10\1\372\17\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\14\10\1\373\13\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\12\10\1\374\15\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\10\1\0\12\10\1\375\15\10\4\0\1\10"+
    "\30\0\2\325\7\0\6\325\6\0\1\120\7\0\1\325"+
    "\1\0\6\325\10\0\1\120\115\0\1\376\26\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\6\10\1\377\21\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\2\10\1\u0100\15\10"+
    "\4\0\1\10\1\0\30\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\11\10\1\u0101\6\10"+
    "\4\0\1\10\1\0\30\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\12\10\1\u0102\5\10"+
    "\4\0\1\10\1\0\30\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\21\10\1\u0103\6\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\14\10\1\u0104\13\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\11\10\1\u0105\16\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\7\10\1\175\20\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\21\10\1\u0106\6\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\14\10\1\u0107\13\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\5\10\1\u0108\22\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\20\10\1\u0109\7\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\4\10\1\u010a\23\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\1\261\27\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\3\10\1\u010b\24\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\12\10\1\u010c\15\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\4\10\1\175\23\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\12\10\1\u010d\15\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\10\10\1\u010e\17\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\23\10\1\u010f\4\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\27\10\1\u0110\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\20\10\4\0\1\10\1\0\20\10"+
    "\1\u0111\7\10\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\20\10\4\0\1\10\1\0\2\10"+
    "\1\261\25\10\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\20\10\4\0\1\10\1\0\20\10"+
    "\1\u0112\7\10\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\20\10\4\0\1\10\1\0\4\10"+
    "\1\u0113\23\10\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\20\10\4\0\1\10\1\0\25\10"+
    "\1\175\2\10\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\20\10\4\0\1\10\1\0\5\10"+
    "\1\u0114\22\10\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\20\10\4\0\1\10\1\0\21\10"+
    "\1\u0115\6\10\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\20\10\4\0\1\10\1\0\12\10"+
    "\1\u0116\15\10\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\20\10\4\0\1\10\1\0\4\10"+
    "\1\u0117\23\10\4\0\1\10\2\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\20\10\4\0\1\10\1\0\3\10"+
    "\1\u0118\24\10\4\0\1\10\103\0\1\u0119\22\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\4\10\1\u011a\23\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\13\10\1\u011b\4\10"+
    "\4\0\1\10\1\0\30\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\4\10\1\u011c\13\10"+
    "\4\0\1\10\1\0\30\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\4\10\1\u011d\13\10"+
    "\4\0\1\10\1\0\30\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\4\10\1\u011e\23\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\4\10\1\u011f\23\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\1\175\27\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\4\10\1\u0120\23\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\10\10\1\u0121\17\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\20\10\1\352\7\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\4\10\1\u0122\23\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\14\10\1\u0123\13\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\13\10\1\175\14\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\21\10\1\u0124\6\10\4\0\1\10\3\0\5\u0125\113\0"+
    "\2\u0125\1\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\10\1\0\20\10\1\175\7\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\3\10\1\u0126\14\10\4\0\1\10\1\0\30\10\4\0"+
    "\1\10\2\0\1\10\11\0\1\10\13\0\2\10\7\0"+
    "\20\10\4\0\1\u0127\1\0\30\10\4\0\1\10\2\0"+
    "\1\10\11\0\1\10\13\0\2\10\7\0\20\10\4\0"+
    "\1\u0128\1\0\30\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\3\10\1\u0129\24\10\4\0\1\10\2\0\1\10\11\0"+
    "\1\10\13\0\2\10\7\0\20\10\4\0\1\10\1\0"+
    "\14\10\1\u012a\13\10\4\0\1\10\2\0\33\u0125\1\u012b"+
    "\32\u0125\1\0\2\u0125\1\0\1\u0125\1\0\1\u0125\1\0"+
    "\3\u0125\1\0\22\u0125\1\10\11\0\1\10\13\0\2\10"+
    "\7\0\10\10\1\u012c\7\10\4\0\1\10\1\0\30\10"+
    "\4\0\1\10\2\0\1\10\11\0\1\10\13\0\2\10"+
    "\7\0\20\10\4\0\1\u012d\1\0\30\10\4\0\1\10"+
    "\2\0\1\10\11\0\1\10\13\0\2\10\7\0\20\10"+
    "\4\0\1\u012e\1\0\30\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\5\0\1\u012f\1\0\20\10"+
    "\4\0\1\10\1\0\30\10\4\0\1\10\2\0\1\10"+
    "\11\0\1\10\13\0\2\10\7\0\20\10\4\0\1\10"+
    "\1\0\4\10\1\u0130\23\10\4\0\1\10\73\0\1\u0131"+
    "\32\0\1\10\11\0\1\10\13\0\2\10\7\0\12\10"+
    "\1\u0132\5\10\4\0\1\10\1\0\30\10\4\0\1\10"+
    "\103\0\1\u0133\22\0\1\10\11\0\1\10\13\0\2\10"+
    "\7\0\6\10\1\u0134\11\10\4\0\1\10\1\0\30\10"+
    "\4\0\1\10\72\0\1\u0135\33\0\1\10\11\0\1\10"+
    "\13\0\2\10\7\0\20\10\4\0\1\u0136\1\0\30\10"+
    "\4\0\1\10\2\0\1\10\11\0\1\10\13\0\2\10"+
    "\7\0\20\10\4\0\1\u0137\1\0\30\10\4\0\1\10"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19236];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\10\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\1\11\4\1\2\11\2\1\1\11\23\1\1\11"+
    "\1\1\4\11\1\0\2\1\4\11\1\0\1\1\4\11"+
    "\2\1\1\11\1\1\1\11\1\1\2\11\2\1\3\11"+
    "\1\0\1\11\5\1\1\11\55\1\2\11\2\1\1\0"+
    "\3\1\1\11\1\1\1\0\1\1\1\11\1\0\1\11"+
    "\70\1\1\11\2\0\47\1\1\0\32\1\1\0\21\1"+
    "\1\0\3\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public final int getTokenStart() {
      return (int) yychar;
  }

  public final int getTokenEnd() {
      return getTokenStart() + yylength();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RubyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public RubyToken advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return RubyToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return RubyToken.BAD_CHARACTER;
            }
            // fall through
          case 100: break;
          case 2:
            { return RubyToken.WHITESPACE;
            }
            // fall through
          case 101: break;
          case 3:
            { return RubyToken.NOT;
            }
            // fall through
          case 102: break;
          case 4:
            { return RubyToken.DOUBLE_QUOTED_STRING;
            }
            // fall through
          case 103: break;
          case 5:
            { return RubyToken.LINE_COMMENT;
            }
            // fall through
          case 104: break;
          case 6:
            { return RubyToken.IDENTIFIER;
            }
            // fall through
          case 105: break;
          case 7:
            { return RubyToken.MOD;
            }
            // fall through
          case 106: break;
          case 8:
            { return RubyToken.AND;
            }
            // fall through
          case 107: break;
          case 9:
            { return RubyToken.SINGLE_QUOTED_STRING;
            }
            // fall through
          case 108: break;
          case 10:
            { return RubyToken.LPAREN;
            }
            // fall through
          case 109: break;
          case 11:
            { return RubyToken.RPAREN;
            }
            // fall through
          case 110: break;
          case 12:
            { return RubyToken.MULT;
            }
            // fall through
          case 111: break;
          case 13:
            { return RubyToken.PLUS;
            }
            // fall through
          case 112: break;
          case 14:
            { return RubyToken.COMMA;
            }
            // fall through
          case 113: break;
          case 15:
            { return RubyToken.MINUS;
            }
            // fall through
          case 114: break;
          case 16:
            { return RubyToken.DOT;
            }
            // fall through
          case 115: break;
          case 17:
            { return RubyToken.DIV;
            }
            // fall through
          case 116: break;
          case 18:
            { return RubyToken.INTEGER_LITERAL;
            }
            // fall through
          case 117: break;
          case 19:
            { return RubyToken.COLON;
            }
            // fall through
          case 118: break;
          case 20:
            { return RubyToken.SEMICOLON;
            }
            // fall through
          case 119: break;
          case 21:
            { return RubyToken.LT;
            }
            // fall through
          case 120: break;
          case 22:
            { return RubyToken.EQ;
            }
            // fall through
          case 121: break;
          case 23:
            { return RubyToken.GT;
            }
            // fall through
          case 122: break;
          case 24:
            { return RubyToken.AT;
            }
            // fall through
          case 123: break;
          case 25:
            { return RubyToken.LBRACK;
            }
            // fall through
          case 124: break;
          case 26:
            { return RubyToken.RBRACK;
            }
            // fall through
          case 125: break;
          case 27:
            { return RubyToken.XOR;
            }
            // fall through
          case 126: break;
          case 28:
            { return RubyToken.BACKTICK;
            }
            // fall through
          case 127: break;
          case 29:
            { return RubyToken.METHOD;
            }
            // fall through
          case 128: break;
          case 30:
            { return RubyToken.LBRACE;
            }
            // fall through
          case 129: break;
          case 31:
            { return RubyToken.OR;
            }
            // fall through
          case 130: break;
          case 32:
            { return RubyToken.RBRACE;
            }
            // fall through
          case 131: break;
          case 33:
            { return RubyToken.TILDE;
            }
            // fall through
          case 132: break;
          case 34:
            { return RubyToken.NOTEQ;
            }
            // fall through
          case 133: break;
          case 35:
            { return RubyToken.MODEQ;
            }
            // fall through
          case 134: break;
          case 36:
            { return RubyToken.ANDAND;
            }
            // fall through
          case 135: break;
          case 37:
            { return RubyToken.ANDEQ;
            }
            // fall through
          case 136: break;
          case 38:
            { return RubyToken.POW;
            }
            // fall through
          case 137: break;
          case 39:
            { return RubyToken.MULTEQ;
            }
            // fall through
          case 138: break;
          case 40:
            { return RubyToken.PLUSEQ;
            }
            // fall through
          case 139: break;
          case 41:
            { return RubyToken.MINUSEQ;
            }
            // fall through
          case 140: break;
          case 42:
            { return RubyToken.RANGE;
            }
            // fall through
          case 141: break;
          case 43:
            { return RubyToken.DOUBLE_LITERAL;
            }
            // fall through
          case 142: break;
          case 44:
            { return RubyToken.DIVEQ;
            }
            // fall through
          case 143: break;
          case 45:
            { return RubyToken.FLOAT_LITERAL;
            }
            // fall through
          case 144: break;
          case 46:
            { return RubyToken.LONG_LITERAL;
            }
            // fall through
          case 145: break;
          case 47:
            { return RubyToken.LTLT;
            }
            // fall through
          case 146: break;
          case 48:
            { return RubyToken.LTEQ;
            }
            // fall through
          case 147: break;
          case 49:
            { return RubyToken.LTGT;
            }
            // fall through
          case 148: break;
          case 50:
            { return RubyToken.EQEQ;
            }
            // fall through
          case 149: break;
          case 51:
            { return RubyToken.GTEQ;
            }
            // fall through
          case 150: break;
          case 52:
            { return RubyToken.GTGT;
            }
            // fall through
          case 151: break;
          case 53:
            { return RubyToken.OR_KEYWORD;
            }
            // fall through
          case 152: break;
          case 54:
            { return RubyToken.XOREQ;
            }
            // fall through
          case 153: break;
          case 55:
            { return RubyToken.DO;
            }
            // fall through
          case 154: break;
          case 56:
            { return RubyToken.IF;
            }
            // fall through
          case 155: break;
          case 57:
            { return RubyToken.IN;
            }
            // fall through
          case 156: break;
          case 58:
            { return RubyToken.OREQ;
            }
            // fall through
          case 157: break;
          case 59:
            { return RubyToken.OROR;
            }
            // fall through
          case 158: break;
          case 60:
            { return RubyToken.EMBEDDED_LITERAL;
            }
            // fall through
          case 159: break;
          case 61:
            { return RubyToken.POWEQ;
            }
            // fall through
          case 160: break;
          case 62:
            { return RubyToken.LTLTEQ;
            }
            // fall through
          case 161: break;
          case 63:
            { return RubyToken.GTGTEQ;
            }
            // fall through
          case 162: break;
          case 64:
            { return RubyToken.AND_KEYWORD;
            }
            // fall through
          case 163: break;
          case 65:
            { return RubyToken.NOT_KEYWORD;
            }
            // fall through
          case 164: break;
          case 66:
            { return RubyToken.DEF;
            }
            // fall through
          case 165: break;
          case 67:
            { return RubyToken.END;
            }
            // fall through
          case 166: break;
          case 68:
            { return RubyToken.FOR;
            }
            // fall through
          case 167: break;
          case 69:
            { return RubyToken.NIL;
            }
            // fall through
          case 168: break;
          case 70:
            { return RubyToken.CASE;
            }
            // fall through
          case 169: break;
          case 71:
            { return RubyToken.ELSE;
            }
            // fall through
          case 170: break;
          case 72:
            { return RubyToken.NEXT;
            }
            // fall through
          case 171: break;
          case 73:
            { return RubyToken.REDO;
            }
            // fall through
          case 172: break;
          case 74:
            { return RubyToken.SELF;
            }
            // fall through
          case 173: break;
          case 75:
            { return RubyToken.THEN;
            }
            // fall through
          case 174: break;
          case 76:
            { return RubyToken.TRUE;
            }
            // fall through
          case 175: break;
          case 77:
            { return RubyToken.WHEN;
            }
            // fall through
          case 176: break;
          case 78:
            { return RubyToken.ALIAS;
            }
            // fall through
          case 177: break;
          case 79:
            { return RubyToken.BEGIN;
            }
            // fall through
          case 178: break;
          case 80:
            { return RubyToken.BREAK;
            }
            // fall through
          case 179: break;
          case 81:
            { return RubyToken.CLASS;
            }
            // fall through
          case 180: break;
          case 82:
            { return RubyToken.ELSIF;
            }
            // fall through
          case 181: break;
          case 83:
            { return RubyToken.FALSE;
            }
            // fall through
          case 182: break;
          case 84:
            { return RubyToken.RETRY;
            }
            // fall through
          case 183: break;
          case 85:
            { return RubyToken.SUPER;
            }
            // fall through
          case 184: break;
          case 86:
            { return RubyToken.UNDEF;
            }
            // fall through
          case 185: break;
          case 87:
            { return RubyToken.UNTIL;
            }
            // fall through
          case 186: break;
          case 88:
            { return RubyToken.WHILE;
            }
            // fall through
          case 187: break;
          case 89:
            { return RubyToken.YIELD;
            }
            // fall through
          case 188: break;
          case 90:
            { return RubyToken.ENSURE;
            }
            // fall through
          case 189: break;
          case 91:
            { return RubyToken.MODULE;
            }
            // fall through
          case 190: break;
          case 92:
            { return RubyToken.RESCUE;
            }
            // fall through
          case 191: break;
          case 93:
            { return RubyToken.RETURN;
            }
            // fall through
          case 192: break;
          case 94:
            { return RubyToken.UNLESS;
            }
            // fall through
          case 193: break;
          case 95:
            { return RubyToken.BLOCK_COMMENT;
            }
            // fall through
          case 194: break;
          case 96:
            { return RubyToken._FILE;
            }
            // fall through
          case 195: break;
          case 97:
            { return RubyToken._LINE;
            }
            // fall through
          case 196: break;
          case 98:
            { return RubyToken.DEFINED;
            }
            // fall through
          case 197: break;
          case 99:
            { return RubyToken._ENCODING;
            }
            // fall through
          case 198: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
